#include <iostream>
#include <vector>
using namespace std;

const int maxn = 500;
const long long INF = 1e18;

long long dp[maxn][maxn][2][2];

void print(int n) {
    for (int i = 0; i < n; i++) {
        for (int k = 0; k < n; k++) {
            for (int prev = 0; prev < 2; prev++) {
                for (int cur = 0; cur < 2; cur++) {
                    cout << "dp[" << i << "][" << k << "][" << prev << "][" << cur << "] = " << dp[i][k][prev][cur] << "\n";
                }
            }
        }
    }
}


int main() {
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            for (int prev = 0; prev < 2; prev++) {
                for (int cur = 0; cur < 2; cur++) {
                    dp[i][j][prev][cur] = INF;
                }
                
            }
        }
    }
    if (a[1] + a[0] > 0) {
        dp[1][1][0][0] = 0;
    } else {
        dp[1][1][0][1] = abs(a[0] + a[1]) + 1;
        dp[1][1][1][0] = abs(a[0] + a[1]) + 1;
        dp[1][1][1][1] = abs(a[0] + a[1]) + 1;
        dp[1][0][0][0] = 0;
    }
    for (int i = 2; i < n; i++) {
        for (int k = 0; k < n; k++) {
            for (int prev = 0; prev < 2; prev++) {
                for (int cur = 0; cur < 2; cur++) {
                    // prev - меняли элемент i - 1
                    // cur - меняем элемент i
                    int prev_val = a[i - 1];
                    if (prev == 1) {
                        if (a[i - 1] + a[i - 2] > 0) { // Менять не надо
                            continue;
                        }
                        prev_val = abs(a[i - 1] + a[i - 2]) + 1;
                    }
                    int delta;
                    if (cur == 1) {
                        if (prev_val + a[i] > 0) { // Менять не надо
                            continue;
                        }
                        delta = abs(prev_val + a[i]) + 1;
                    } else {
                        delta = 0;
                    }
                    // prev_val - актульаное значение предыдущего элемента
                    // delta - прибавка, чтобы сделать пару i - 1, i - хорошей
                    if (k - 1 >= 0) {
                        dp[i][k][prev][cur] = min(dp[i][k][prev][cur], dp[i - 1][k - 1][0][prev] + delta);
                        dp[i][k][prev][cur] = min(dp[i][k][prev][cur], dp[i - 1][k - 1][1][prev] + delta);
                    }
                    dp[i][k][prev][cur] = min(dp[i][k][prev][cur], dp[i - 1][k][0][prev]);
                    dp[i][k][prev][cur] = min(dp[i][k][prev][cur], dp[i - 1][k][1][prev]);
                }
            }
        }
    }
    print(n);
    long long mn = INF;
    for (int k = 0; k < n; k++) {
        for (int prev = 0; prev < 2; prev++) {
            for (int cur = 0; cur < 2; cur++) {
                mn = min(mn, dp[n - 1][n - 1 - k][prev][cur]);
            }
        }
        cout << mn << " ";
    }
    
}